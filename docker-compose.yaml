services:
  #frontend container
  purvana:
    pull_policy: always
    build:
      context: ./frontend/src
      dockerfile: Dockerfile  
    ports:
      - "1337:1337"
    depends_on:
      - product_db_api
      - order_db_api
    environment:
      PRODUCTS_PORT: 13371
      PRODUCTS_HOST: product_db_api
      ORDERS_PORT: 13373
      ORDERS_HOST: order_db_api

  #container for product_db
  product_db:
    image: postgres
    container_name: product_db
    restart: always
    expose:
      - 13370
    ports:
      - "13370:5432"
    environment:
      POSTGRES_HOST: product_db
      POSTGRES_PORT: 5432
      POSTGRES_DB: product_db
      POSTGRES_USER: rootuser
      POSTGRES_PASSWORD: root
    volumes:
    - product_db:/var/lib/postgresql/data
    - ./pd_init.sql:/docker-entrypoint-initdb.d/init.sql
  
  #container for product_db api
  product_db_api:
    container_name: product_db_api
    pull_policy: always
    build:
      context: ./backend/productdb
      dockerfile: Dockerfile  
    expose:
      - 13371
    ports:
      - "13371:13371"
    environment:
      SERVICE_PORT: 13371
      POSTGRES_HOST: product_db
      POSTGRES_PORT: 5432
      POSTGRES_DB: product_db
      POSTGRES_USER: rootuser
      POSTGRES_PASSWORD: root
    depends_on:
      - product_db
      - kafka

  #container for order_db
  order_db:
    image: postgres
    container_name: order_db
    restart: always
    expose:
      - 13372
    ports:
      - "13372:5432"
    environment:
      POSTGRES_HOST: order_db
      POSTGRES_PORT: 5432
      POSTGRES_DB: order_db
      POSTGRES_USER: rootuser
      POSTGRES_PASSWORD: root
    volumes:
    - order_db:/var/lib/postgresql/data
    - ./od_init.sql:/docker-entrypoint-initdb.d/init.sql

  #container for order_db api
  order_db_api:
    container_name: order_db_api
    pull_policy: always
    build:
      context: ./backend/orderdb
      dockerfile: Dockerfile 
    expose:
      - 13373
    ports:
      - "13373:13373"
    environment:
      SERVICE_PORT: 13373
      POSTGRES_HOST: order_db
      POSTGRES_PORT: 5432
      POSTGRES_DB: order_db
      POSTGRES_USER: rootuser
      POSTGRES_PASSWORD: root
    depends_on:
      - order_db
      - kafka
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka
    ports:
      - "8097:8097"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:8097,INTERNAL://kafka:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    restart: on-failure
    healthcheck:
      test: ["CMD", "ping", "-c", "1", "localhost:8097"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  order_db:
  product_db: